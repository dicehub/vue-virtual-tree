{
  "base": {
    "source": "<template>\n  <div class=\"demo\">\n    <vir-tree :source=\"list\" />\n  </div>\n</template>\n\n<script lang=\"tsx\">\n  import { defineComponent, onMounted, ref } from 'vue';\n  import { VirTree } from 'vue-virtual-tree';\n  import { TreeNodeOptions } from 'vue-virtual-tree/VirtualTree/types';\n  function recursion(path = '0', level = 3): TreeNodeOptions[] {\n    const list = [];\n    for (let i = 0; i < 10; i += 1) {\n      const nodeKey = `${path}-${i}`;\n      const treeNode: TreeNodeOptions  = {\n        nodeKey,\n        name: nodeKey,\n        expanded: true,\n        children: [],\n        hasChildren: true,\n        disabled: i % 2 === 0\n      };\n\n      if (level > 0) {\n        treeNode.children = recursion(nodeKey, level - 1);\n      } else {\n        treeNode.hasChildren = false;\n      }\n\n      list.push(treeNode);\n    }\n    return list;\n  }\n\n  export default defineComponent({\n    name: 'BaseDemo',\n    components: { VirTree },\n    setup(prop, { emit }) {\n      const list = ref<TreeNodeOptions[]>([]);\n      onMounted(() => {\n        list.value = recursion();\n      });\n      return {\n        list\n      }\n    }\n  });\n</script>\n",
    "highlight": "<pre class='hljs'><code>&lt;<span class=\"hljs-keyword\">template</span>&gt;\n  &lt;<span class=\"hljs-keyword\">div</span> class=<span class=\"hljs-string\">\"demo\"</span>&gt;\n    &lt;vir-tree :source=<span class=\"hljs-string\">\"list\"</span> /&gt;\n  &lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/<span class=\"hljs-keyword\">template</span>&gt;\n\n&lt;script lang=<span class=\"hljs-string\">\"tsx\"</span>&gt;\n  <span class=\"hljs-keyword\">import</span> { defineComponent, onMounted, <span class=\"hljs-keyword\">ref</span> } <span class=\"hljs-keyword\">from</span> 'vue';\n  <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-type\">VirTree</span> } <span class=\"hljs-keyword\">from</span> 'vue-virtual-tree';\n  <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-type\">TreeNodeOptions</span> } <span class=\"hljs-keyword\">from</span> 'vue-virtual-tree/<span class=\"hljs-type\">VirtualTree</span>/types';\n  function recursion(path = '<span class=\"hljs-number\">0</span>', level = <span class=\"hljs-number\">3</span>): <span class=\"hljs-type\">TreeNodeOptions</span>[] {\n    <span class=\"hljs-keyword\">const</span> list = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i += <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">const</span> nodeKey = `${path}-${i}`;\n      <span class=\"hljs-keyword\">const</span> treeNode: <span class=\"hljs-type\">TreeNodeOptions</span>  = {\n        nodeKey,\n        name: nodeKey,\n        expanded: <span class=\"hljs-literal\">true</span>,\n        children: [],\n        hasChildren: <span class=\"hljs-literal\">true</span>,\n        disabled: i % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>\n      };\n\n      <span class=\"hljs-keyword\">if</span> (level &gt; <span class=\"hljs-number\">0</span>) {\n        treeNode.children = recursion(nodeKey, level - <span class=\"hljs-number\">1</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        treeNode.hasChildren = <span class=\"hljs-literal\">false</span>;\n      }\n\n      list.push(treeNode);\n    }\n    <span class=\"hljs-keyword\">return</span> list;\n  }\n\n  <span class=\"hljs-keyword\">export</span> default defineComponent({\n    name: '<span class=\"hljs-type\">BaseDemo</span>',\n    components: { <span class=\"hljs-type\">VirTree</span> },\n    setup(prop, { emit }) {\n      <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeNodeOptions</span>[]&gt;([]);\n      onMounted(() =&gt; {\n        list.value = recursion();\n      });\n      <span class=\"hljs-keyword\">return</span> {\n        list\n      }\n    }\n  });\n&lt;/script&gt;\n</code></pre>"
  }
}
