{
  "base": {
    "source": "<template>\n  <div class=\"demo\">\n    <button @click=\"selectedNode\">获取选中节点</button>\n    <vir-tree :source=\"list\" />\n  </div>\n</template>\n\n<script lang=\"tsx\">\n  import { defineComponent, onMounted, ref } from 'vue';\n  import { VirTree } from 'vue-virtual-tree';\n  import { TreeNodeOptions } from 'vue-virtual-tree/VirtualTree/types';\n  import {TreeInstance} from \"@/components/VirtualTree/types\";\n  function recursion(path = '0', level = 3): TreeNodeOptions[] {\n    const list = [];\n    for (let i = 0; i < 10; i += 1) {\n      const nodeKey = `${path}-${i}`;\n      const treeNode: TreeNodeOptions  = {\n        nodeKey,\n        name: nodeKey,\n        expanded: true,\n        children: [],\n        hasChildren: true,\n        disabled: i % 2 === 0\n      };\n\n      if (level > 0) {\n        treeNode.children = recursion(nodeKey, level - 1);\n      } else {\n        treeNode.hasChildren = false;\n      }\n\n      list.push(treeNode);\n    }\n    return list;\n  }\n\n  export default defineComponent({\n    name: 'BaseDemo',\n    components: { VirTree },\n    setup(prop, { emit }) {\n      const list = ref<TreeNodeOptions[]>([]);\n      const virTree = ref<TreeInstance | null>(null);\n      onMounted(() => {\n        list.value = recursion();\n      });\n      const selectedNode = () => {\n        const node = virTree.value!.getSelectedNode();\n        console.log('selected node', node);\n      }\n      return {\n        list,\n        virTree,\n        selectedNode\n      }\n    }\n  });\n</script>\n",
    "highlight": "<pre class='hljs'><code>&lt;<span class=\"hljs-keyword\">template</span>&gt;\n  &lt;<span class=\"hljs-keyword\">div</span> class=<span class=\"hljs-string\">\"demo\"</span>&gt;\n    &lt;button @click=<span class=\"hljs-string\">\"selectedNode\"</span>&gt;获取选中节点&lt;/button&gt;\n    &lt;vir-tree :source=<span class=\"hljs-string\">\"list\"</span> /&gt;\n  &lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/<span class=\"hljs-keyword\">template</span>&gt;\n\n&lt;script lang=<span class=\"hljs-string\">\"tsx\"</span>&gt;\n  <span class=\"hljs-keyword\">import</span> { defineComponent, onMounted, <span class=\"hljs-keyword\">ref</span> } <span class=\"hljs-keyword\">from</span> 'vue';\n  <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-type\">VirTree</span> } <span class=\"hljs-keyword\">from</span> 'vue-virtual-tree';\n  <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-type\">TreeNodeOptions</span> } <span class=\"hljs-keyword\">from</span> 'vue-virtual-tree/<span class=\"hljs-type\">VirtualTree</span>/types';\n  <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-type\">TreeInstance</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/components/VirtualTree/types\"</span>;\n  function recursion(path = '<span class=\"hljs-number\">0</span>', level = <span class=\"hljs-number\">3</span>): <span class=\"hljs-type\">TreeNodeOptions</span>[] {\n    <span class=\"hljs-keyword\">const</span> list = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i += <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">const</span> nodeKey = `${path}-${i}`;\n      <span class=\"hljs-keyword\">const</span> treeNode: <span class=\"hljs-type\">TreeNodeOptions</span>  = {\n        nodeKey,\n        name: nodeKey,\n        expanded: <span class=\"hljs-literal\">true</span>,\n        children: [],\n        hasChildren: <span class=\"hljs-literal\">true</span>,\n        disabled: i % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>\n      };\n\n      <span class=\"hljs-keyword\">if</span> (level &gt; <span class=\"hljs-number\">0</span>) {\n        treeNode.children = recursion(nodeKey, level - <span class=\"hljs-number\">1</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        treeNode.hasChildren = <span class=\"hljs-literal\">false</span>;\n      }\n\n      list.push(treeNode);\n    }\n    <span class=\"hljs-keyword\">return</span> list;\n  }\n\n  <span class=\"hljs-keyword\">export</span> default defineComponent({\n    name: '<span class=\"hljs-type\">BaseDemo</span>',\n    components: { <span class=\"hljs-type\">VirTree</span> },\n    setup(prop, { emit }) {\n      <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeNodeOptions</span>[]&gt;([]);\n      <span class=\"hljs-keyword\">const</span> virTree = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeInstance</span> | null&gt;(null);\n      onMounted(() =&gt; {\n        list.value = recursion();\n      });\n      <span class=\"hljs-keyword\">const</span> selectedNode = () =&gt; {\n        <span class=\"hljs-keyword\">const</span> node = virTree.value!.getSelectedNode();\n        console.log('selected node', node);\n      }\n      <span class=\"hljs-keyword\">return</span> {\n        list,\n        virTree,\n        selectedNode\n      }\n    }\n  });\n&lt;/script&gt;\n</code></pre>"
  },
  "checkbox": {
    "source": "<template>\n  <div class=\"demo\">\n    <section>\n      <h5>默认父子节点联动</h5>\n      <button @click=\"halfNodes\">获取半选节点</button>\n      <vir-tree ref=\"virTreeOne\" show-checkbox :source=\"list\" />\n    </section>\n    <section>\n      <h5>父子节点不联动</h5>\n      <button @click=\"checkedNodes\">获取勾选节点</button>\n      <vir-tree ref=\"virTreeTwo\" show-checkbox check-strictly :source=\"list\" />\n    </section>\n  </div>\n</template>\n\n<script lang=\"tsx\">\n  import {defineComponent, onMounted, ref} from 'vue';\n  import {TreeInstance, TreeNodeOptions} from \"@/components/VirtualTree/types\";\n  import {getCheckNodes, getHalfCheckNodes} from \"./uses\";\n\n  function recursion(path = '0', level = 3): TreeNodeOptions[] {\n    const list = [];\n    for (let i = 0; i < 10; i += 1) {\n      const nodeKey = `${path}-${i}`;\n      const treeNode: TreeNodeOptions  = {\n        nodeKey,\n        name: nodeKey,\n        children: [],\n        hasChildren: true\n      };\n\n      if (level > 0) {\n        treeNode.children = recursion(nodeKey, level - 1);\n      } else {\n        treeNode.hasChildren = false;\n      }\n\n      list.push(treeNode);\n    }\n    return list;\n  }\n\n  export default defineComponent({\n    name: 'CheckboxDemo',\n    setup(prop, {emit}) {\n      const list = ref<TreeNodeOptions[]>([]);\n      const virTreeOne = ref<TreeInstance | null>(null);\n      const virTreeTwo = ref<TreeInstance | null>(null);\n      onMounted(() => {\n        list.value = recursion();\n      });\n      const halfNodes = () => {\n        getHalfCheckNodes(virTreeOne.value!);\n      }\n      const checkedNodes = () => {\n        getCheckNodes(virTreeTwo.value!);\n      }\n      return {\n        list,\n        virTreeOne,\n        virTreeTwo,\n        halfNodes,\n        checkedNodes\n      }\n    }\n  });\n</script>\n",
    "highlight": "<pre class='hljs'><code>&lt;<span class=\"hljs-keyword\">template</span>&gt;\n  &lt;<span class=\"hljs-keyword\">div</span> class=<span class=\"hljs-string\">\"demo\"</span>&gt;\n    &lt;section&gt;\n      &lt;h5&gt;默认父子节点联动&lt;/h5&gt;\n      &lt;button @click=<span class=\"hljs-string\">\"halfNodes\"</span>&gt;获取半选节点&lt;/button&gt;\n      &lt;vir-tree <span class=\"hljs-keyword\">ref</span>=<span class=\"hljs-string\">\"virTreeOne\"</span> show-checkbox :source=<span class=\"hljs-string\">\"list\"</span> /&gt;\n    &lt;/section&gt;\n    &lt;section&gt;\n      &lt;h5&gt;父子节点不联动&lt;/h5&gt;\n      &lt;button @click=<span class=\"hljs-string\">\"checkedNodes\"</span>&gt;获取勾选节点&lt;/button&gt;\n      &lt;vir-tree <span class=\"hljs-keyword\">ref</span>=<span class=\"hljs-string\">\"virTreeTwo\"</span> show-checkbox check-strictly :source=<span class=\"hljs-string\">\"list\"</span> /&gt;\n    &lt;/section&gt;\n  &lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/<span class=\"hljs-keyword\">template</span>&gt;\n\n&lt;script lang=<span class=\"hljs-string\">\"tsx\"</span>&gt;\n  <span class=\"hljs-keyword\">import</span> {defineComponent, onMounted, <span class=\"hljs-keyword\">ref</span>} <span class=\"hljs-keyword\">from</span> 'vue';\n  <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-type\">TreeInstance</span>, <span class=\"hljs-type\">TreeNodeOptions</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/components/VirtualTree/types\"</span>;\n  <span class=\"hljs-keyword\">import</span> {getCheckNodes, getHalfCheckNodes} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./uses\"</span>;\n\n  function recursion(path = '<span class=\"hljs-number\">0</span>', level = <span class=\"hljs-number\">3</span>): <span class=\"hljs-type\">TreeNodeOptions</span>[] {\n    <span class=\"hljs-keyword\">const</span> list = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i += <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">const</span> nodeKey = `${path}-${i}`;\n      <span class=\"hljs-keyword\">const</span> treeNode: <span class=\"hljs-type\">TreeNodeOptions</span>  = {\n        nodeKey,\n        name: nodeKey,\n        children: [],\n        hasChildren: <span class=\"hljs-literal\">true</span>\n      };\n\n      <span class=\"hljs-keyword\">if</span> (level &gt; <span class=\"hljs-number\">0</span>) {\n        treeNode.children = recursion(nodeKey, level - <span class=\"hljs-number\">1</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        treeNode.hasChildren = <span class=\"hljs-literal\">false</span>;\n      }\n\n      list.push(treeNode);\n    }\n    <span class=\"hljs-keyword\">return</span> list;\n  }\n\n  <span class=\"hljs-keyword\">export</span> default defineComponent({\n    name: '<span class=\"hljs-type\">CheckboxDemo</span>',\n    setup(prop, {emit}) {\n      <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeNodeOptions</span>[]&gt;([]);\n      <span class=\"hljs-keyword\">const</span> virTreeOne = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeInstance</span> | null&gt;(null);\n      <span class=\"hljs-keyword\">const</span> virTreeTwo = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeInstance</span> | null&gt;(null);\n      onMounted(() =&gt; {\n        list.value = recursion();\n      });\n      <span class=\"hljs-keyword\">const</span> halfNodes = () =&gt; {\n        getHalfCheckNodes(virTreeOne.value!);\n      }\n      <span class=\"hljs-keyword\">const</span> checkedNodes = () =&gt; {\n        getCheckNodes(virTreeTwo.value!);\n      }\n      <span class=\"hljs-keyword\">return</span> {\n        list,\n        virTreeOne,\n        virTreeTwo,\n        halfNodes,\n        checkedNodes\n      }\n    }\n  });\n&lt;/script&gt;\n</code></pre>"
  }
}
