(function(e){function n(n){for(var t,r,o=n[0],c=n[1],p=n[2],i=0,u=[];i<o.length;i++)r=o[i],Object.prototype.hasOwnProperty.call(a,r)&&a[r]&&u.push(a[r][0]),a[r]=0;for(t in c)Object.prototype.hasOwnProperty.call(c,t)&&(e[t]=c[t]);d&&d(n);while(u.length)u.shift()();return l.push.apply(l,p||[]),s()}function s(){for(var e,n=0;n<l.length;n++){for(var s=l[n],t=!0,o=1;o<s.length;o++){var c=s[o];0!==a[c]&&(t=!1)}t&&(l.splice(n--,1),e=r(r.s=s[0]))}return e}var t={},a={app:0},l=[];function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,n,s){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:s})},r.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"===typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var t in e)r.d(s,t,function(n){return e[n]}.bind(null,t));return s},r.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="/";var o=window["webpackJsonp"]=window["webpackJsonp"]||[],c=o.push.bind(o);o.push=n,o=o.slice();for(var p=0;p<o.length;p++)n(o[p]);var d=c;l.push([0,"chunk-vendors"]),s()})({0:function(e,n,s){e.exports=s("cd49")},"039a":function(e,n,s){},"126f":function(e,n,s){},"2ad0":function(e,n,s){},4678:function(e,n,s){var t={"./af":"2bfb","./af.js":"2bfb","./ar":"8e73","./ar-dz":"a356","./ar-dz.js":"a356","./ar-kw":"423e","./ar-kw.js":"423e","./ar-ly":"1cfd","./ar-ly.js":"1cfd","./ar-ma":"0a84","./ar-ma.js":"0a84","./ar-sa":"8230","./ar-sa.js":"8230","./ar-tn":"6d83","./ar-tn.js":"6d83","./ar.js":"8e73","./az":"485c","./az.js":"485c","./be":"1fc1","./be.js":"1fc1","./bg":"84aa","./bg.js":"84aa","./bm":"a7fa","./bm.js":"a7fa","./bn":"9043","./bn-bd":"9686","./bn-bd.js":"9686","./bn.js":"9043","./bo":"d26a","./bo.js":"d26a","./br":"6887","./br.js":"6887","./bs":"2554","./bs.js":"2554","./ca":"d716","./ca.js":"d716","./cs":"3c0d","./cs.js":"3c0d","./cv":"03ec","./cv.js":"03ec","./cy":"9797","./cy.js":"9797","./da":"0f14","./da.js":"0f14","./de":"b469","./de-at":"b3eb","./de-at.js":"b3eb","./de-ch":"bb71","./de-ch.js":"bb71","./de.js":"b469","./dv":"598a","./dv.js":"598a","./el":"8d47","./el.js":"8d47","./en-au":"0e6b","./en-au.js":"0e6b","./en-ca":"3886","./en-ca.js":"3886","./en-gb":"39a6","./en-gb.js":"39a6","./en-ie":"e1d3","./en-ie.js":"e1d3","./en-il":"7333","./en-il.js":"7333","./en-in":"ec2e","./en-in.js":"ec2e","./en-nz":"6f50","./en-nz.js":"6f50","./en-sg":"b7e9","./en-sg.js":"b7e9","./eo":"65db","./eo.js":"65db","./es":"898b","./es-do":"0a3c","./es-do.js":"0a3c","./es-mx":"b5b7","./es-mx.js":"b5b7","./es-us":"55c9","./es-us.js":"55c9","./es.js":"898b","./et":"ec18","./et.js":"ec18","./eu":"0ff2","./eu.js":"0ff2","./fa":"8df4","./fa.js":"8df4","./fi":"81e9","./fi.js":"81e9","./fil":"d69a","./fil.js":"d69a","./fo":"0721","./fo.js":"0721","./fr":"9f26","./fr-ca":"d9f8","./fr-ca.js":"d9f8","./fr-ch":"0e49","./fr-ch.js":"0e49","./fr.js":"9f26","./fy":"7118","./fy.js":"7118","./ga":"5120","./ga.js":"5120","./gd":"f6b4","./gd.js":"f6b4","./gl":"8840","./gl.js":"8840","./gom-deva":"aaf2","./gom-deva.js":"aaf2","./gom-latn":"0caa","./gom-latn.js":"0caa","./gu":"e0c5","./gu.js":"e0c5","./he":"c7aa","./he.js":"c7aa","./hi":"dc4d","./hi.js":"dc4d","./hr":"4ba9","./hr.js":"4ba9","./hu":"5b14","./hu.js":"5b14","./hy-am":"d6b6","./hy-am.js":"d6b6","./id":"5038","./id.js":"5038","./is":"0558","./is.js":"0558","./it":"6e98","./it-ch":"6f12","./it-ch.js":"6f12","./it.js":"6e98","./ja":"079e","./ja.js":"079e","./jv":"b540","./jv.js":"b540","./ka":"201b","./ka.js":"201b","./kk":"6d79","./kk.js":"6d79","./km":"e81d","./km.js":"e81d","./kn":"3e92","./kn.js":"3e92","./ko":"22f8","./ko.js":"22f8","./ku":"2421","./ku.js":"2421","./ky":"9609","./ky.js":"9609","./lb":"440c","./lb.js":"440c","./lo":"b29d","./lo.js":"b29d","./lt":"26f9","./lt.js":"26f9","./lv":"b97c","./lv.js":"b97c","./me":"293c","./me.js":"293c","./mi":"688b","./mi.js":"688b","./mk":"6909","./mk.js":"6909","./ml":"02fb","./ml.js":"02fb","./mn":"958b","./mn.js":"958b","./mr":"39bd","./mr.js":"39bd","./ms":"ebe4","./ms-my":"6403","./ms-my.js":"6403","./ms.js":"ebe4","./mt":"1b45","./mt.js":"1b45","./my":"8689","./my.js":"8689","./nb":"6ce3","./nb.js":"6ce3","./ne":"3a39","./ne.js":"3a39","./nl":"facd","./nl-be":"db29","./nl-be.js":"db29","./nl.js":"facd","./nn":"b84c","./nn.js":"b84c","./oc-lnc":"167b","./oc-lnc.js":"167b","./pa-in":"f3ff","./pa-in.js":"f3ff","./pl":"8d57","./pl.js":"8d57","./pt":"f260","./pt-br":"d2d4","./pt-br.js":"d2d4","./pt.js":"f260","./ro":"972c","./ro.js":"972c","./ru":"957c","./ru.js":"957c","./sd":"6784","./sd.js":"6784","./se":"ffff","./se.js":"ffff","./si":"eda5","./si.js":"eda5","./sk":"7be6","./sk.js":"7be6","./sl":"8155","./sl.js":"8155","./sq":"c8f3","./sq.js":"c8f3","./sr":"cf1e","./sr-cyrl":"13e9","./sr-cyrl.js":"13e9","./sr.js":"cf1e","./ss":"52bd","./ss.js":"52bd","./sv":"5fbd","./sv.js":"5fbd","./sw":"74dc","./sw.js":"74dc","./ta":"3de5","./ta.js":"3de5","./te":"5cbb","./te.js":"5cbb","./tet":"576c","./tet.js":"576c","./tg":"3b1b","./tg.js":"3b1b","./th":"10e8","./th.js":"10e8","./tk":"5aff","./tk.js":"5aff","./tl-ph":"0f38","./tl-ph.js":"0f38","./tlh":"cf75","./tlh.js":"cf75","./tr":"0e81","./tr.js":"0e81","./tzl":"cf51","./tzl.js":"cf51","./tzm":"c109","./tzm-latn":"b53d","./tzm-latn.js":"b53d","./tzm.js":"c109","./ug-cn":"6117","./ug-cn.js":"6117","./uk":"ada2","./uk.js":"ada2","./ur":"5294","./ur.js":"5294","./uz":"2e8c","./uz-latn":"010e","./uz-latn.js":"010e","./uz.js":"2e8c","./vi":"2921","./vi.js":"2921","./x-pseudo":"fd7e","./x-pseudo.js":"fd7e","./yo":"7f33","./yo.js":"7f33","./zh-cn":"5c3a","./zh-cn.js":"5c3a","./zh-hk":"49ab","./zh-hk.js":"49ab","./zh-mo":"3a6c","./zh-mo.js":"3a6c","./zh-tw":"90ea","./zh-tw.js":"90ea"};function a(e){var n=l(e);return s(n)}function l(e){if(!s.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}a.keys=function(){return Object.keys(t)},a.resolve=l,e.exports=a,a.id="4678"},"4d3c":function(e,n,s){"use strict";s("d210")},"57db":function(e,n,s){},6861:function(e,n,s){},"74c9":function(e,n,s){},"75ed":function(e,n,s){"use strict";s("126f")},"7a37":function(e,n,s){"use strict";s("57db")},"8a80":function(e,n,s){"use strict";s("2ad0")},9384:function(e,n,s){e.exports=s.p+"img/principle.0b61a657.png"},cd49:function(e,n,s){"use strict";s.r(n);s("e260"),s("e6cf"),s("cca6"),s("a79d");var t=s("7a23"),a=Object(t["Q"])("data-v-cbe06f8c");Object(t["B"])("data-v-cbe06f8c");var l=Object(t["l"])("h2",{class:"title"},"Vue virtual tree",-1),r=Object(t["l"])("a",{class:"link",href:"//github.com/lycHub/vue-next-drag",target:"_blank"},"github",-1),o=Object(t["k"])(" Ant Design ©2018 Created by Ant UED ");Object(t["z"])();var c=a((function(e,n){var s=Object(t["F"])("a-layout-header"),c=Object(t["F"])("doc-container"),p=Object(t["F"])("a-anchor-link"),d=Object(t["F"])("a-anchor"),i=Object(t["F"])("a-layout-content"),u=Object(t["F"])("a-layout-footer"),h=Object(t["F"])("a-layout");return Object(t["y"])(),Object(t["j"])(h,{class:"app-layout"},{default:a((function(){return[Object(t["l"])(s,{class:"header"},{default:a((function(){return[l,r]})),_:1}),Object(t["l"])(i,{class:"content"},{default:a((function(){return[Object(t["l"])(c),Object(t["l"])(d,{class:"anchor"},{default:a((function(){return[Object(t["l"])(p,{href:"#usage",title:"安装使用"}),Object(t["l"])(p,{href:"#base-demo",title:"基本用法"}),Object(t["l"])(p,{href:"#checkbox-demo",title:"可勾选"}),Object(t["l"])(p,{href:"#async-dada-demo",title:"异步加载"}),Object(t["l"])(p,{href:"#custom-node-demo",title:"自定义渲染节点"}),Object(t["l"])(p,{href:"#custom-icon-demo",title:"自定义图标"}),Object(t["l"])(p,{href:"#search-node-demo",title:"搜索树"})]})),_:1})]})),_:1}),Object(t["l"])(u,{class:"footer"},{default:a((function(){return[o]})),_:1})]})),_:1})})),p=s("9384"),d=s.n(p),i=Object(t["Q"])("data-v-1badf3f6");Object(t["B"])("data-v-1badf3f6");var u={class:"doc-container"},h={class:"sec",id:"usage"},j=Object(t["k"])("使用说明"),f={class:"install"},b=Object(t["k"])("安装"),y=Object(t["l"])("pre",null,"npm i vue-virtual-tree",-1),m={class:"notice"},v=Object(t["k"])("必须要传size属性"),g=Object(t["k"])(" 由于虚拟组件要监听滚动事件，动态替换node节点，所以需要知道每个节点的高度， 默认size=27，如果您要自定义渲染node或图标，那么务必将真实的size传进来， 另外还有remain属性，控制高度，超出隐藏，默认remain = 8 所以默认的tree.maxHeight = 27 * 8 "),k=Object(t["l"])("img",{src:d.a,alt:"原理"},null,-1),O={class:"custom-view"},w=Object(t["k"])("关于自定义样式"),N=Object(t["k"])(" 组件已经提供自定义node节点和图标的功能(见下面示例)， 如果还有些样式需要更细致的修改，请自行用css覆盖 "),T={class:"custom-view"},x=Object(t["k"])("关于刷新整个tree"),C=Object(t["k"])(" 处于新能考虑，tree内部监听 source时，并没有开启 "),K=Object(t["l"])("b",null,"deep",-1),D=Object(t["k"])(" 当你只改变source中的某个属性而view并未更新时，"),_=Object(t["l"])("b",null,"可能需要改变source的引用，比如 list.value = list.value.slice()",-1),V={class:"sec"},S=Object(t["k"])("代码演示");Object(t["z"])();var P=i((function(e,n){var s=Object(t["F"])("a-typography-title"),a=Object(t["F"])("a-typography-paragraph"),l=Object(t["F"])("a-card"),r=Object(t["F"])("base-demo"),o=Object(t["F"])("demo-box"),c=Object(t["F"])("async-data-demo"),p=Object(t["F"])("custom-icon-demo"),d=Object(t["F"])("a-col"),P=Object(t["F"])("checkbox-demo"),E=Object(t["F"])("custom-node-demo"),z=Object(t["F"])("search-node-demo"),M=Object(t["F"])("a-row");return Object(t["y"])(),Object(t["j"])("div",u,[Object(t["l"])("section",h,[Object(t["l"])(s,{level:3},{default:i((function(){return[j]})),_:1}),Object(t["l"])(l,null,{default:i((function(){return[Object(t["l"])("div",f,[Object(t["l"])(s,{level:4},{default:i((function(){return[b]})),_:1}),Object(t["l"])(a,null,{default:i((function(){return[y]})),_:1})]),Object(t["l"])("div",m,[Object(t["l"])(s,{level:4},{default:i((function(){return[v]})),_:1}),Object(t["l"])(a,null,{default:i((function(){return[g]})),_:1}),k]),Object(t["l"])("div",O,[Object(t["l"])(s,{level:4},{default:i((function(){return[w]})),_:1}),Object(t["l"])(a,null,{default:i((function(){return[N]})),_:1})]),Object(t["l"])("div",T,[Object(t["l"])(s,{level:4},{default:i((function(){return[x]})),_:1}),Object(t["l"])(a,null,{default:i((function(){return[C,K,D,_]})),_:1})])]})),_:1})]),Object(t["l"])("section",V,[Object(t["l"])(s,{level:3},{default:i((function(){return[S]})),_:1}),Object(t["l"])(M,{gutter:16,class:"demo-boxes"},{default:i((function(){return[Object(t["l"])(d,{span:12},{default:i((function(){return[Object(t["l"])(o,{id:"base-demo",title:"基本用法",desc:"展开、选中、禁用的基本功能aa","code-type":"base"},{default:i((function(){return[Object(t["l"])(r)]})),_:1}),Object(t["l"])(o,{id:"async-dada-demo",title:"异步加载数据",desc:"点击展开节点，动态加载数据。","code-type":"asyncData"},{default:i((function(){return[Object(t["l"])(c)]})),_:1}),Object(t["l"])(o,{id:"custom-icon-demo",title:"自定义图标",desc:"自定义展开、收起图标","code-type":"customIcon"},{default:i((function(){return[Object(t["l"])(p)]})),_:1})]})),_:1}),Object(t["l"])(d,{span:12},{default:i((function(){return[Object(t["l"])(o,{id:"checkbox-demo",title:"可勾选",desc:"showCheckbox属性开启勾选，默认父子节点联动，设置checkStrictly属性，可让父子节点不做联动","code-type":"checkbox"},{default:i((function(){return[Object(t["l"])(P)]})),_:1}),Object(t["l"])(o,{id:"custom-node-demo",title:"自定义渲染节点",desc:"绑定render函数自定义节点，参数data为当前node数据。注意：如果改变了默认的高度(size), 需要传入size属性","code-type":"customNode"},{default:i((function(){return[Object(t["l"])(E)]})),_:1}),Object(t["l"])(o,{id:"search-node-demo",title:"搜索树",desc:"虽然组件内部没有直接提供，但可以配合render自行实现","code-type":"searchNode"},{default:i((function(){return[Object(t["l"])(z)]})),_:1})]})),_:1})]})),_:1})])])})),E=Object(t["Q"])("data-v-2fcb3fd2");Object(t["B"])("data-v-2fcb3fd2");var z={class:"demo-box"},M={class:"show"},$={class:"meta"},F={class:"title"},I={class:"desc"},R={class:"actions"},B=Object(t["l"])("a",null,[Object(t["l"])("i",{class:"iconfont iconcode"})],-1),U={class:"highlight-wrap"};Object(t["z"])();var A=E((function(e,n){var s=Object(t["F"])("a-tooltip"),a=Object(t["F"])("a-typography-paragraph");return Object(t["y"])(),Object(t["j"])("div",z,[Object(t["l"])("div",M,[Object(t["E"])(e.$slots,"default")]),Object(t["l"])("div",$,[Object(t["l"])("div",F,Object(t["H"])(e.title),1),Object(t["l"])("div",I,[Object(t["l"])("p",null,Object(t["H"])(e.desc),1)]),Object(t["l"])("div",R,[Object(t["l"])(s,null,{title:E((function(){return[Object(t["k"])(Object(t["H"])(e.toggleBtnLabel),1)]})),default:E((function(){return[Object(t["l"])("span",{class:"act",onClick:n[1]||(n[1]=function(){return e.toggleExpand&&e.toggleExpand.apply(e,arguments)})},[B])]})),_:1}),Object(t["l"])(a,{class:"act",style:{display:"inline-block"},copyable:{text:e.preCode.source}},null,8,["copyable"])])]),Object(t["P"])(Object(t["l"])("div",U,[Object(t["l"])("div",{class:"highlight",innerHTML:e.preCode.highlight},null,8,["innerHTML"])],512),[[t["L"],"收起"===e.toggleBtnLabel]])])})),H=s("e5c6"),L=Object(t["m"])({name:"DemoBox",props:{title:{type:String,default:""},desc:{type:String,default:""},codeType:{type:String,default:""}},emits:[],setup:function(e,n){n.emit;var s=Object(t["D"])("展开"),a=Object(t["D"])(null),l=function(){s.value="展开"===s.value?"收起":"展开"};return a.value=H[e.codeType],{toggleBtnLabel:s,toggleExpand:l,preCode:a}}});s("4d3c");L.render=A,L.__scopeId="data-v-2fcb3fd2";var Q=L,W={class:"demo"},q=Object(t["k"])("获取选中节点");function J(e,n){var s=Object(t["F"])("a-button"),a=Object(t["F"])("vir-tree");return Object(t["y"])(),Object(t["j"])("div",W,[Object(t["l"])(s,{onClick:e.selectedNode},{default:Object(t["O"])((function(){return[q]})),_:1},8,["onClick"]),Object(t["l"])(a,{ref:"virTree",source:e.list},null,8,["source"])])}s("99af"),s("b0c0");var Z=s("f64c");function G(e){var n=e.getSelectedNode();console.log("selected node",n),n?Z["a"].info("选中了".concat(n.name)):Z["a"].info("未选中节点")}function Y(e){var n=e.getHalfCheckedNodes();console.log("checks",n),Z["a"].info("".concat(n.length,"个半选节点"))}function X(e){var n=e.getCheckedNodes();console.log("checks",n),Z["a"].info("选中了".concat(n.length,"条数据"))}function ee(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"0",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,s=[],t=0;t<10;t+=1){var a="".concat(e,"-").concat(t),l={nodeKey:a,name:a,expanded:!0,children:[],hasChildren:!0,disabled:t%2===0};n>0?l.children=ee(a,n-1):l.hasChildren=!1,s.push(l)}return s}var ne=Object(t["m"])({name:"BaseDemo",setup:function(e,n){n.emit;var s=Object(t["D"])([]),a=Object(t["D"])(null);Object(t["v"])((function(){s.value=ee()}));var l=function(){G(a.value)};return{list:s,virTree:a,selectedNode:l}}});ne.render=J;var se=ne,te=Object(t["Q"])("data-v-10a86b8b");Object(t["B"])("data-v-10a86b8b");var ae={class:"demo"},le=Object(t["l"])("h5",null,"默认父子节点联动",-1),re=Object(t["k"])("获取半选节点"),oe=Object(t["l"])("h5",null,"父子节点不联动",-1),ce=Object(t["k"])("获取勾选节点");Object(t["z"])();var pe=te((function(e,n){var s=Object(t["F"])("a-button"),a=Object(t["F"])("vir-tree");return Object(t["y"])(),Object(t["j"])("div",ae,[Object(t["l"])("section",null,[le,Object(t["l"])(s,{onClick:e.halfNodes},{default:te((function(){return[re]})),_:1},8,["onClick"]),Object(t["l"])(a,{ref:"virTreeOne","show-checkbox":"",source:e.list},null,8,["source"])]),Object(t["l"])("section",null,[oe,Object(t["l"])(s,{onClick:e.checkedNodes},{default:te((function(){return[ce]})),_:1},8,["onClick"]),Object(t["l"])(a,{ref:"virTreeTwo","show-checkbox":"","check-strictly":"",source:e.list},null,8,["source"])])])}));function de(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"0",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,s=[],t=0;t<10;t++){var a="".concat(e,"-").concat(t),l={nodeKey:a,name:a,children:[],hasChildren:!0};n>0?l.children=de(a,n-1):l.hasChildren=!1,s.push(l)}return s}var ie=Object(t["m"])({name:"CheckboxDemo",setup:function(e,n){n.emit;var s=Object(t["D"])([]),a=Object(t["D"])(null),l=Object(t["D"])(null);Object(t["v"])((function(){s.value=de()}));var r=function(){Y(a.value)},o=function(){X(l.value)};return{list:s,virTreeOne:a,virTreeTwo:l,halfNodes:r,checkedNodes:o}}});s("7a37");ie.render=pe,ie.__scopeId="data-v-10a86b8b";var ue=ie,he={class:"demo"},je=Object(t["k"])("获取勾选节点");function fe(e,n){var s=Object(t["F"])("a-button"),a=Object(t["F"])("vir-tree");return Object(t["y"])(),Object(t["j"])("div",he,[Object(t["l"])(s,{onClick:e.checkedNodes},{default:Object(t["O"])((function(){return[je]})),_:1},8,["onClick"]),Object(t["l"])(a,{ref:"virTree",source:e.list,"show-checkbox":"",loadData:e.loadData},null,8,["source","loadData"])])}function be(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"0",n=[],s=0;s<2;s+=1){var t="".concat(e,"-").concat(s),a={nodeKey:t,name:t,children:[],hasChildren:!0};n.push(a)}return n}var ye=Object(t["m"])({name:"AsyncDataDemo",setup:function(e,n){n.emit;var s=Object(t["D"])([]),a=Object(t["D"])(null);Object(t["v"])((function(){s.value=be()}));var l=function(e,n){console.log("loadData",e);for(var s=[],t=0;t<2;t+=1){var a="".concat(e.nodeKey,"-").concat(t),l={nodeKey:a,name:a,children:[],hasChildren:!0};s.push(l)}setTimeout((function(){n(s)}),500)},r=function(){X(a.value)};return{list:s,virTree:a,loadData:l,checkedNodes:r}}});ye.render=fe;var me=ye,ve={class:"demo"};function ge(e,n){var s=Object(t["F"])("vir-tree");return Object(t["y"])(),Object(t["j"])("div",ve,[Object(t["l"])(s,{source:e.list,"show-checkbox":"",render:e.renderNode},null,8,["source","render"])])}function ke(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"0",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,s=[],t=0;t<10;t++){var a="".concat(e,"-").concat(t),l={nodeKey:a,name:a,children:[],hasChildren:!0};n>0?l.children=ke(a,n-1):l.hasChildren=!1,s.push(l)}return s}var Oe=Object(t["m"])({name:"CustomNodeDemo",setup:function(e,n){n.emit;var s=Object(t["D"])([]);Object(t["v"])((function(){s.value=ke()}));var a=function(e){return Object(t["l"])("div",{style:"padding: 0 4px;"},[Object(t["l"])("b",{style:"color: #f60;"},[e.name])])};return{list:s,renderNode:a}}});Oe.render=ge;var we=Oe,Ne={class:"demo"},Te={key:0,class:"iconfont iconcustom-icon ico-loading"},xe={key:1,class:"iconfont iconzhankai"};function Ce(e,n){var s=Object(t["F"])("vir-tree");return Object(t["y"])(),Object(t["j"])("div",Ne,[Object(t["l"])(s,{source:e.list,"show-checkbox":"",loadData:e.loadData},{icon:Object(t["O"])((function(e){return[e?(Object(t["y"])(),Object(t["j"])("i",Te)):(Object(t["y"])(),Object(t["j"])("i",xe))]})),_:1},8,["source","loadData"])])}function Ke(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"0",n=[],s=0;s<2;s+=1){var t="".concat(e,"-").concat(s),a={nodeKey:t,name:t,children:[],hasChildren:!0};n.push(a)}return n}var De=Object(t["m"])({name:"CustomIcon",setup:function(e,n){n.emit;var s=Object(t["D"])([]);Object(t["v"])((function(){s.value=Ke()}));var a=function(e,n){console.log("loadData",e);for(var s=[],t=0;t<2;t+=1){var a="".concat(e.nodeKey,"-").concat(t),l={nodeKey:a,name:a,children:[],hasChildren:!0};s.push(l)}setTimeout((function(){n(s)}),500)};return{list:s,loadData:a}}});De.render=Ce;var _e=De,Ve=(s("841c"),s("ac1f"),{class:"demo"});function Se(e,n){var s=Object(t["F"])("a-input"),a=Object(t["F"])("vir-tree");return Object(t["y"])(),Object(t["j"])("div",Ve,[Object(t["l"])(s,{placeholder:"回车搜索",onPressEnter:e.search},null,8,["onPressEnter"]),Object(t["l"])("section",null,[Object(t["l"])(a,{"show-checkbox":"",source:e.list,render:e.renderNode},null,8,["source","render"])])])}var Pe=s("2909"),Ee=s("b85c"),ze=(s("caad"),s("2532"),s("4d63"),s("25f0"),s("5319"),s("6062"),s("d3b7"),s("3ca3"),s("ddb0"),s("0481"),s("d81d"),["##==-open_tag-==##","##==-close_tag-==##"]),Me=[];function $e(e){var n=[];if(e){var s=e.parentPath||[];n=s.concat(e.nodeKey)}return n}function Fe(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"0",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,t=[],a=0;a<10;a++){var l="".concat(e,"-").concat(a),r={nodeKey:l,name:l,children:[],hasChildren:!0,expanded:Me.includes(l),parentPath:$e(s)};n>0?r.children=Fe(l,n-1,r):r.hasChildren=!1,t.push(r)}return t}var Ie=Object(t["m"])({name:"SearchNodeDemo",setup:function(e,n){n.emit;var s=Object(t["D"])(""),a=Object(t["D"])([]);Object(t["v"])((function(){a.value=Fe()}));var l=function(e){return new RegExp(e.replace(/([.*+?^=!:${}()|[\]\/\\])/g,"\\$&"),"i")},r=function(e){var n=[],s=function s(t){var a,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,o=Object(Ee["a"])(t);try{for(o.s();!(a=o.n()).done;){var c,p=a.value,d=l(e).test(p.name);d&&n.push(p),r&&(r.expanded=d),null!==(c=p.children)&&void 0!==c&&c.length&&s(p.children,p)}}catch(i){o.e(i)}finally{o.f()}};return e&&s(a.value),n},o=function(e){s.value=e.target.value;var n=r(s.value);n.length&&(Me=Object(Pe["a"])(new Set(n.map((function(e){return e.parentPath})).flat())),a.value=Fe())},c=function(e,n){if(n){var s=e.replace(l(n),"".concat(ze[0],"$&").concat(ze[1]));return s.replace(new RegExp(ze[0],"g"),'<span style="color: #ff2041;">').replace(new RegExp(ze[1],"g"),"</span>")}return e},p=function(e){var n=c(e.name,s.value);return Object(t["l"])("div",{style:"padding: 0 4px;",innerHTML:n},null)};return{list:a,search:o,renderNode:p}}});Ie.render=Se;var Re=Ie,Be=Object(t["m"])({name:"DocContainer",components:{DemoBox:Q,BaseDemo:se,CheckboxDemo:ue,AsyncDataDemo:me,CustomNodeDemo:we,CustomIconDemo:_e,SearchNodeDemo:Re},props:{},emits:[],setup:function(e,n){n.emit;return{}}});s("75ed");Be.render=P,Be.__scopeId="data-v-1badf3f6";var Ue=Be,Ae=Object(t["m"])({components:{DocContainer:Ue},setup:function(){return{selectedKeys:Object(t["D"])(["2"])}}});s("8a80");Ae.render=c,Ae.__scopeId="data-v-cbe06f8c";var He=Ae,Le=(s("159b"),s("5efb")),Qe=s("98c5"),We=s("55f1"),qe=s("9a63"),Je=s("e32c"),Ze=s("f933"),Ge=s("960f"),Ye=s("782e"),Xe=s("cdeb"),en=s("b558"),nn=[Le["a"],Qe["a"],We["a"],qe["a"],Je["a"],Ze["a"],Ge["a"],Ye["a"],Xe["a"],en["a"]],sn=function(e){nn.forEach((function(n){return e.use(n)}))},tn=s("3835"),an=(s("a9e3"),s("c740"),s("a434"),s("4de4"),s("7db0"),s("cd3f")),ln=s.n(an),rn=s("5530");function on(e){var n=[];function s(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return e.map((function(e){var l,r=Object(rn["a"])(Object(rn["a"])({},e),{},{level:t,loading:!1,disabled:e.disabled||!1,expand:e.expanded||!1,selected:e.selected||!1,checked:e.checked||(null===a||void 0===a?void 0:a.checked)||!1,hasChildren:e.hasChildren||!1,parentKey:(null===a||void 0===a?void 0:a.nodeKey)||null});return n.push(r),e.expanded&&null!==(l=e.children)&&void 0!==l&&l.length?r.children=s(e.children,t+1,r):r.children=r.children||[],r}))}return s(e),n}function cn(e,n){var s=function n(s){s.length&&s.forEach((function(s){var t;s.checked=e,null!==(t=s.children)&&void 0!==t&&t.length&&n(s.children)}))};s(n.children)}function pn(e,n){var s=function e(s){if(null!=s.parentKey){var t=n.find((function(e){return e.nodeKey==s.parentKey})),a=!t.children.some((function(e){return!e.checked}));a!==t.checked&&(t.checked=a,e(t))}};s(e)}function dn(e){var n=Object(t["n"])();n&&Object.assign(n.proxy,e)}s("74c9");var un=Object(t["m"])({name:"VirCheckbox",props:{modelValue:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},halfChecked:{type:Boolean,default:!1}},emits:["update:modelValue","change"],setup:function(e,n){var s=n.emit,a=n.slots,l=Object(t["h"])((function(){var n="vir-checkbox";return e.modelValue&&(n+=" checked"),e.disabled&&(n+=" disabled"),e.halfChecked&&(n+=" half-checked"),n})),r=function(){e.disabled||(s("update:modelValue",!e.modelValue),s("change",!e.modelValue))};return function(){return Object(t["l"])("div",{class:l.value,onClick:r},[Object(t["l"])("div",{class:"inner"},null),Object(t["l"])("div",{class:"content"},[a.default&&a.default()])])}}}),hn=Object(t["m"])({name:"RenderNode",props:{node:{type:Object,required:!0},render:{type:Function,required:!0}},setup:function(e){return function(){return e.render(e.node)}}}),jn=Object(t["m"])({name:"VirTreeNode",props:{node:{type:Object,required:!0},iconSlot:Function,showCheckbox:{type:Boolean,default:!1},checkStrictly:{type:Boolean,default:!1},render:Function},emits:["select-change","toggle-expand","check-change"],setup:function(e,n){var s=n.emit,a=Object(t["h"])((function(){var n=!1;if(!e.checkStrictly&&e.node.hasChildren){var s=e.node.children,t=s.filter((function(e){return e.checked}));n=t.length>0&&t.length<s.length}return n})),l=Object(t["h"])((function(){var n="node-title";return e.node.selected&&(n+=" selected"),e.node.disabled&&(n+=" disabled"),n})),r=function(){e.node.disabled||s("select-change",e.node)},o=function(){s("toggle-expand",e.node)},c=function(n){s("check-change",[n,e.node])},p=function(){return Object(t["l"])("div",{class:["node-arrow",e.node.expanded?"expanded":""],onClick:o},[e.node.hasChildren?e.iconSlot?e.iconSlot(e.node.loading):e.node.loading?Object(t["l"])("i",{class:"iconfont iconloading ico-loading"},null):Object(t["l"])("i",{class:"iconfont iconExpand"},null):null])},d=function(){return e.showCheckbox?Object(t["l"])(un,{class:"node-content node-check-box",disabled:e.node.disabled,modelValue:e.node.checked,halfChecked:a.value,onChange:c},{default:function(){return[e.render?Object(t["l"])(hn,{render:e.render,node:e.node},null):Object(t["l"])("span",{class:"node-title"},[e.node.name])]}}):Object(t["l"])("div",{class:"node-content node-text",onClick:r},[e.render?Object(t["l"])(hn,{render:e.render,node:e.node},null):Object(t["l"])("span",{class:l.value},[e.node.name])])};return dn({rawNode:e.node,halfChecked:function(){return a.value}}),function(){return Object(t["l"])("div",{class:"vir-tree-node",style:{paddingLeft:18*e.node.level+"px"}},[p(),d()])}}}),fn=Object(t["m"])({name:"VirtualList",props:{list:{type:Array,default:function(){return[]}},customForOf:{type:Boolean,default:!1},size:{type:Number,required:!0},remain:{type:Number,required:!0},start:{type:Number,default:0},offset:{type:Number,default:0},additional:{type:Number,default:0},dataKey:{type:String,default:"id"}},emits:["update:modelValue","range"],setup:function(e,n){var s=n.emit,a=n.slots,l=Object(t["D"])(null),r=Object(t["r"])({start:0,end:0,scrollTop:0,paddingTop:0,paddingBottom:0}),o=Object(t["D"])([]),c=Object(t["h"])((function(){return e.remain+(e.additional||e.remain)})),p=Object(t["h"])((function(){return e.size*e.remain})),d=function(n){var s=n+c.value-1;return e.list.length?Math.min(e.list.length-1,s):s},i=function(n){var s=Math.max(0,n),t=e.list.length-c.value,a=s>=t;return a&&(s=Math.max(0,t)),{start:s,end:d(s),isLastZone:a}},u=function(){var n=e.list.length,s=n>c.value,t=e.size*(s?r.start:0),a=e.size*(s?n-c.value:0)-t;a<e.size&&(a=0),r.paddingTop=t,r.paddingBottom=a},h=function(){if(e.list.length){for(var n=[],s=r.start;s<=r.end;s++)n.push(e.list[s]);return n}return[]},j=function(){e.customForOf?s("range",{start:r.start,end:r.end}):o.value=h()},f=function(n){var s=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=Math.floor(n/e.size),a=i(t),l=e.additional||e.remain,o=!1;s||t<r.start?o=!0:a.isLastZone?r.start===a.start&&r.end===a.end||(o=!0):o=t>=r.start+l,o&&(r.start=a.start,r.end=a.end,u(),j())},b=function(){var n=arguments.length>0&&void 0!==arguments[0]&&arguments[0];r.start=n&&e.list.length>r.start+c.value?e.start:0,r.end=d(r.start),u(),j()},y=function(){e.list.length>c.value?f(l.value.scrollTop):b()},m=function(e){l.value.scrollTop=e};Object(t["M"])((function(){return e.list}),(function(n){e.list.length>c.value?f(l.value.scrollTop,!0):b()}),{deep:!0}),Object(t["v"])((function(){if(e.list.length&&b(!0),e.start){var n=i(e.start).start;m(n*e.size)}else e.offset&&m(e.offset)}));var v=function(){return e.customForOf?a.default():o.value.map((function(n,s){return Object(t["l"])("div",{key:n[e.dataKey]},[a.default({item:n,index:r.start+s})])}))};return function(){return Object(t["l"])("div",{class:"vir-list",ref:l,onScroll:y,style:{maxHeight:p.value+"px",overflowY:"auto"}},[Object(t["l"])("div",{class:"main-box",style:{paddingTop:r.paddingTop+"px",paddingBottom:r.paddingBottom+"px"}},[v()])])}}}),bn=(s("039a"),Object(t["m"])({name:"VirTree",props:{source:{type:Array,default:function(){return[]}},readonly:{type:Boolean,default:!1},showCheckbox:{type:Boolean,default:!1},checkStrictly:{type:Boolean,default:!1},size:{type:Number,default:27},remain:{type:Number,default:8},loadData:Function,render:Function},emits:["selectChange","checkChange"],setup:function(e,n){var s=n.emit,a=n.slots,l=Object(t["G"])(!1),r=Object(t["D"])(""),o=Object(t["D"])([]);Object(t["M"])((function(){return e.source}),(function(e){o.value=on(e)}),{immediate:!0});var c=function(e){if(e.selected=!e.selected,r.value!==e.nodeKey){var n=o.value.findIndex((function(e){return e.nodeKey===r.value}));n>-1&&(o.value[n].selected=!1),e.selected=!0,r.value=e.nodeKey,s("selectChange",e)}},p=function(n){var t=Object(tn["a"])(n,2),a=t[0],l=t[1];l.checked=a,e.checkStrictly||(cn(a,l),pn(l,o.value)),s("checkChange",l)},d=function(e){var n,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],t=s.length?s:ln()(e.children);e.children=t.map((function(n){var s;return n.loading=!1,n.level=n.level||e.level+1,n.disabled=n.disabled||!1,n.selected=n.selected||!1,n.expanded=n.expanded||!1,n.checked=null!==(s=n.checked)&&void 0!==s?s:e.checked,n.children=n.children||[],n.hasChildren=n.hasChildren||!1,n.parentKey=e.nodeKey||null,n}));var a=o.value.findIndex((function(n){return n.nodeKey===e.nodeKey}));(n=o.value).splice.apply(n,[a+1,0].concat(Object(Pe["a"])(e.children)))},i=function(e){var n=[],s=function e(s){var t;null!==(t=s.children)&&void 0!==t&&t.length&&s.children.forEach((function(s){n.push(s.nodeKey),s.expanded&&(s.expanded=!1,e(s))}))};s(e),n.length&&(o.value=o.value.filter((function(e){return!n.includes(e.nodeKey)})))},u=function(n){var s;l.value||(n.expanded=!n.expanded,n.expanded?null!==(s=n.children)&&void 0!==s&&s.length?d(n):e.loadData&&(n.loading=!0,l.value=!0,e.loadData(n,(function(e){n.loading=!1,l.value=!1,e.length&&d(n,e)}))):i(n))},h=Object(t["D"])([]),j=function(e,n){n&&(h.value[e]=n)};return dn({getSelectedNode:function(){return o.value.find((function(e){return e.selected}))},getCheckedNodes:function(){return o.value.filter((function(e){return e.checked}))},getHalfCheckedNodes:function(){return h.value.filter((function(e){return e.halfChecked()})).map((function(e){return e.rawNode}))}}),function(){return Object(t["l"])("div",{class:"vir-tree"},[Object(t["o"])(fn,{class:["vir-tree-wrap"],size:e.size,remain:e.remain,list:o.value,dataKey:"nodeKey"},{default:function(n){return Object(t["o"])(jn,{ref:j.bind(null,n.index),node:n.item,showCheckbox:e.showCheckbox,checkStrictly:e.checkStrictly,iconSlot:a.icon,render:e.render,onSelectChange:c,onToggleExpand:u,onCheckChange:p})}})])}}})),yn=function(e){e.component(bn.name,bn)};s("6861");Object(t["i"])(He).use(sn).use(yn).mount("#app")},d210:function(e,n,s){},e5c6:function(e){e.exports=JSON.parse('{"base":{"source":"<template>\\n  <div class=\\"demo\\">\\n    <button @click=\\"selectedNode\\">获取选中节点</button>\\n    <vir-tree ref=\\"virTree\\" :source=\\"list\\" />\\n  </div>\\n</template>\\n\\n<script lang=\\"tsx\\">\\n  import {defineComponent, onMounted, ref} from \'vue\';\\n  import { VirTree } from \\"vue-virtual-tree\\";\\n  import {TreeInstance, TreeNodeOptions} from \\"vue-virtual-tree/VirtualTree/types\\";\\n\\n  function recursion(path = \'0\', level = 3): TreeNodeOptions[] {\\n    const list = [];\\n    for (let i = 0; i < 10; i += 1) {\\n      const nodeKey = `${path}-${i}`;\\n      const treeNode: TreeNodeOptions  = {\\n        nodeKey,\\n        name: nodeKey,\\n        expanded: true,\\n        children: [],\\n        hasChildren: true,\\n        disabled: i % 2 === 0\\n      };\\n\\n      if (level > 0) {\\n        treeNode.children = recursion(nodeKey, level - 1);\\n      } else {\\n        treeNode.hasChildren = false;\\n      }\\n\\n      list.push(treeNode);\\n    }\\n    return list;\\n  }\\n\\n  export default defineComponent({\\n    name: \'BaseDemo\',\\n    components: { VirTree },\\n    setup(prop, {emit}) {\\n      const list = ref<TreeNodeOptions[]>([]);\\n      const virTree = ref<TreeInstance | null>(null);\\n      onMounted(() => {\\n        list.value = recursion();\\n      });\\n      const selectedNode = () => {\\n        const node = virTree.value!.getSelectedNode();\\n        console.log(\'selected node\', node);\\n      }\\n      return {\\n        list,\\n        virTree,\\n        selectedNode\\n      }\\n    }\\n  });\\n<\/script>\\n","highlight":"<pre class=\'hljs\'><code>&lt;<span class=\\"hljs-keyword\\">template</span>&gt;\\n  &lt;<span class=\\"hljs-keyword\\">div</span> class=<span class=\\"hljs-string\\">\\"demo\\"</span>&gt;\\n    &lt;button @click=<span class=\\"hljs-string\\">\\"selectedNode\\"</span>&gt;获取选中节点&lt;/button&gt;\\n    &lt;vir-tree <span class=\\"hljs-keyword\\">ref</span>=<span class=\\"hljs-string\\">\\"virTree\\"</span> :source=<span class=\\"hljs-string\\">\\"list\\"</span> /&gt;\\n  &lt;/<span class=\\"hljs-keyword\\">div</span>&gt;\\n&lt;/<span class=\\"hljs-keyword\\">template</span>&gt;\\n\\n&lt;script lang=<span class=\\"hljs-string\\">\\"tsx\\"</span>&gt;\\n  <span class=\\"hljs-keyword\\">import</span> {defineComponent, onMounted, <span class=\\"hljs-keyword\\">ref</span>} <span class=\\"hljs-keyword\\">from</span> \'vue\';\\n  <span class=\\"hljs-keyword\\">import</span> { <span class=\\"hljs-type\\">VirTree</span> } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"vue-virtual-tree\\"</span>;\\n  <span class=\\"hljs-keyword\\">import</span> {<span class=\\"hljs-type\\">TreeInstance</span>, <span class=\\"hljs-type\\">TreeNodeOptions</span>} <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"vue-virtual-tree/VirtualTree/types\\"</span>;\\n\\n  function recursion(path = \'<span class=\\"hljs-number\\">0</span>\', level = <span class=\\"hljs-number\\">3</span>): <span class=\\"hljs-type\\">TreeNodeOptions</span>[] {\\n    <span class=\\"hljs-keyword\\">const</span> list = [];\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; <span class=\\"hljs-number\\">10</span>; i += <span class=\\"hljs-number\\">1</span>) {\\n      <span class=\\"hljs-keyword\\">const</span> nodeKey = `${path}-${i}`;\\n      <span class=\\"hljs-keyword\\">const</span> treeNode: <span class=\\"hljs-type\\">TreeNodeOptions</span>  = {\\n        nodeKey,\\n        name: nodeKey,\\n        expanded: <span class=\\"hljs-literal\\">true</span>,\\n        children: [],\\n        hasChildren: <span class=\\"hljs-literal\\">true</span>,\\n        disabled: i % <span class=\\"hljs-number\\">2</span> === <span class=\\"hljs-number\\">0</span>\\n      };\\n\\n      <span class=\\"hljs-keyword\\">if</span> (level &gt; <span class=\\"hljs-number\\">0</span>) {\\n        treeNode.children = recursion(nodeKey, level - <span class=\\"hljs-number\\">1</span>);\\n      } <span class=\\"hljs-keyword\\">else</span> {\\n        treeNode.hasChildren = <span class=\\"hljs-literal\\">false</span>;\\n      }\\n\\n      list.push(treeNode);\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> list;\\n  }\\n\\n  <span class=\\"hljs-keyword\\">export</span> default defineComponent({\\n    name: \'<span class=\\"hljs-type\\">BaseDemo</span>\',\\n    components: { <span class=\\"hljs-type\\">VirTree</span> },\\n    setup(prop, {emit}) {\\n      <span class=\\"hljs-keyword\\">const</span> list = <span class=\\"hljs-keyword\\">ref</span>&lt;<span class=\\"hljs-type\\">TreeNodeOptions</span>[]&gt;([]);\\n      <span class=\\"hljs-keyword\\">const</span> virTree = <span class=\\"hljs-keyword\\">ref</span>&lt;<span class=\\"hljs-type\\">TreeInstance</span> | null&gt;(null);\\n      onMounted(() =&gt; {\\n        list.value = recursion();\\n      });\\n      <span class=\\"hljs-keyword\\">const</span> selectedNode = () =&gt; {\\n        <span class=\\"hljs-keyword\\">const</span> node = virTree.value!.getSelectedNode();\\n        console.log(\'selected node\', node);\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> {\\n        list,\\n        virTree,\\n        selectedNode\\n      }\\n    }\\n  });\\n&lt;/script&gt;\\n</code></pre>"},"checkbox":{"source":"<template>\\n  <div class=\\"demo\\">\\n    <section>\\n      <h5>默认父子节点联动</h5>\\n      <button @click=\\"halfNodes\\">获取半选节点</button>\\n      <vir-tree ref=\\"virTreeOne\\" show-checkbox :source=\\"list\\" />\\n    </section>\\n    <section>\\n      <h5>父子节点不联动</h5>\\n      <button @click=\\"checkedNodes\\">获取勾选节点</button>\\n      <vir-tree ref=\\"virTreeTwo\\" show-checkbox check-strictly :source=\\"list\\" />\\n    </section>\\n  </div>\\n</template>\\n\\n<script lang=\\"tsx\\">\\n  import {defineComponent, onMounted, ref} from \'vue\';\\n  import { VirTree } from \\"vue-virtual-tree\\";\\n  import {TreeInstance, TreeNodeOptions} from \\"vue-virtual-tree/VirtualTree/types\\";\\n\\n  function recursion(path = \'0\', level = 3): TreeNodeOptions[] {\\n    const list = [];\\n    for (let i = 0; i < 10; i++) {\\n      const nodeKey = `${path}-${i}`;\\n      const treeNode: TreeNodeOptions = {\\n        nodeKey,\\n        name: nodeKey,\\n        children: [],\\n        hasChildren: true\\n      };\\n\\n      if (level > 0) {\\n        treeNode.children = recursion(nodeKey, level - 1);\\n      } else {\\n        treeNode.hasChildren = false;\\n      }\\n\\n      list.push(treeNode);\\n    }\\n    return list;\\n  }\\n\\n  export default defineComponent({\\n    name: \'CheckboxDemo\',\\n    setup(prop, {emit}) {\\n      const list = ref<TreeNodeOptions[]>([]);\\n      const virTreeOne = ref<TreeInstance | null>(null);\\n      const virTreeTwo = ref<TreeInstance | null>(null);\\n      onMounted(() => {\\n        list.value = recursion();\\n      });\\n      const halfNodes = () => {\\n        const checks = virTreeOne.value!.getHalfCheckedNodes();\\n        console.log(\'checks\', checks);\\n      }\\n      const checkedNodes = () => {\\n        const checks = virTreeTwo.value.getCheckedNodes();\\n        console.log(\'checks\', checks);\\n      }\\n      return {\\n        list,\\n        virTreeOne,\\n        virTreeTwo,\\n        halfNodes,\\n        checkedNodes\\n      }\\n    }\\n  });\\n<\/script>\\n","highlight":"<pre class=\'hljs\'><code>&lt;<span class=\\"hljs-keyword\\">template</span>&gt;\\n  &lt;<span class=\\"hljs-keyword\\">div</span> class=<span class=\\"hljs-string\\">\\"demo\\"</span>&gt;\\n    &lt;section&gt;\\n      &lt;h5&gt;默认父子节点联动&lt;/h5&gt;\\n      &lt;button @click=<span class=\\"hljs-string\\">\\"halfNodes\\"</span>&gt;获取半选节点&lt;/button&gt;\\n      &lt;vir-tree <span class=\\"hljs-keyword\\">ref</span>=<span class=\\"hljs-string\\">\\"virTreeOne\\"</span> show-checkbox :source=<span class=\\"hljs-string\\">\\"list\\"</span> /&gt;\\n    &lt;/section&gt;\\n    &lt;section&gt;\\n      &lt;h5&gt;父子节点不联动&lt;/h5&gt;\\n      &lt;button @click=<span class=\\"hljs-string\\">\\"checkedNodes\\"</span>&gt;获取勾选节点&lt;/button&gt;\\n      &lt;vir-tree <span class=\\"hljs-keyword\\">ref</span>=<span class=\\"hljs-string\\">\\"virTreeTwo\\"</span> show-checkbox check-strictly :source=<span class=\\"hljs-string\\">\\"list\\"</span> /&gt;\\n    &lt;/section&gt;\\n  &lt;/<span class=\\"hljs-keyword\\">div</span>&gt;\\n&lt;/<span class=\\"hljs-keyword\\">template</span>&gt;\\n\\n&lt;script lang=<span class=\\"hljs-string\\">\\"tsx\\"</span>&gt;\\n  <span class=\\"hljs-keyword\\">import</span> {defineComponent, onMounted, <span class=\\"hljs-keyword\\">ref</span>} <span class=\\"hljs-keyword\\">from</span> \'vue\';\\n  <span class=\\"hljs-keyword\\">import</span> { <span class=\\"hljs-type\\">VirTree</span> } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"vue-virtual-tree\\"</span>;\\n  <span class=\\"hljs-keyword\\">import</span> {<span class=\\"hljs-type\\">TreeInstance</span>, <span class=\\"hljs-type\\">TreeNodeOptions</span>} <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"vue-virtual-tree/VirtualTree/types\\"</span>;\\n\\n  function recursion(path = \'<span class=\\"hljs-number\\">0</span>\', level = <span class=\\"hljs-number\\">3</span>): <span class=\\"hljs-type\\">TreeNodeOptions</span>[] {\\n    <span class=\\"hljs-keyword\\">const</span> list = [];\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; <span class=\\"hljs-number\\">10</span>; i++) {\\n      <span class=\\"hljs-keyword\\">const</span> nodeKey = `${path}-${i}`;\\n      <span class=\\"hljs-keyword\\">const</span> treeNode: <span class=\\"hljs-type\\">TreeNodeOptions</span> = {\\n        nodeKey,\\n        name: nodeKey,\\n        children: [],\\n        hasChildren: <span class=\\"hljs-literal\\">true</span>\\n      };\\n\\n      <span class=\\"hljs-keyword\\">if</span> (level &gt; <span class=\\"hljs-number\\">0</span>) {\\n        treeNode.children = recursion(nodeKey, level - <span class=\\"hljs-number\\">1</span>);\\n      } <span class=\\"hljs-keyword\\">else</span> {\\n        treeNode.hasChildren = <span class=\\"hljs-literal\\">false</span>;\\n      }\\n\\n      list.push(treeNode);\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> list;\\n  }\\n\\n  <span class=\\"hljs-keyword\\">export</span> default defineComponent({\\n    name: \'<span class=\\"hljs-type\\">CheckboxDemo</span>\',\\n    setup(prop, {emit}) {\\n      <span class=\\"hljs-keyword\\">const</span> list = <span class=\\"hljs-keyword\\">ref</span>&lt;<span class=\\"hljs-type\\">TreeNodeOptions</span>[]&gt;([]);\\n      <span class=\\"hljs-keyword\\">const</span> virTreeOne = <span class=\\"hljs-keyword\\">ref</span>&lt;<span class=\\"hljs-type\\">TreeInstance</span> | null&gt;(null);\\n      <span class=\\"hljs-keyword\\">const</span> virTreeTwo = <span class=\\"hljs-keyword\\">ref</span>&lt;<span class=\\"hljs-type\\">TreeInstance</span> | null&gt;(null);\\n      onMounted(() =&gt; {\\n        list.value = recursion();\\n      });\\n      <span class=\\"hljs-keyword\\">const</span> halfNodes = () =&gt; {\\n        <span class=\\"hljs-keyword\\">const</span> checks = virTreeOne.value!.getHalfCheckedNodes();\\n        console.log(\'checks\', checks);\\n      }\\n      <span class=\\"hljs-keyword\\">const</span> checkedNodes = () =&gt; {\\n        <span class=\\"hljs-keyword\\">const</span> checks = virTreeTwo.value.getCheckedNodes();\\n        console.log(\'checks\', checks);\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> {\\n        list,\\n        virTreeOne,\\n        virTreeTwo,\\n        halfNodes,\\n        checkedNodes\\n      }\\n    }\\n  });\\n&lt;/script&gt;\\n</code></pre>"},"asyncData":{"source":"<template>\\n  <div class=\\"demo\\">\\n    <button @click=\\"checkedNodes\\">获取勾选节点</button>\\n    <vir-tree ref=\\"virTree\\" :source=\\"list\\" show-checkbox :loadData=\\"loadData\\" />\\n  </div>\\n</template>\\n\\n<script lang=\\"tsx\\">\\n  import {defineComponent, onMounted, ref} from \'vue\';\\n  import { VirTree } from \\"vue-virtual-tree\\";\\n  import {TreeInstance, TreeNodeOptions} from \\"vue-virtual-tree/VirtualTree/types\\";\\n\\n  function recursion(path = \'0\'): TreeNodeOptions[] {\\n    const list = [];\\n    for (let i = 0; i < 2; i += 1) {\\n      const nodeKey = `${path}-${i}`;\\n      const treeNode: TreeNodeOptions  = {\\n        nodeKey,\\n        name: nodeKey,\\n        children: [],\\n        hasChildren: true\\n      };\\n      list.push(treeNode);\\n    }\\n    return list;\\n  }\\n\\n  export default defineComponent({\\n    name: \'AsyncDataDemo\',\\n    components: { VirTree },\\n    setup(prop, {emit}) {\\n      const list = ref<TreeNodeOptions[]>([]);\\n      const virTree = ref<TreeInstance | null>(null);\\n      onMounted(() => {\\n        list.value = recursion();\\n      });\\n      const loadData = (node: TreeNodeOptions, callback: (children: TreeNodeOptions[]) => void) => {\\n        console.log(\'loadData\', node);\\n        const result: TreeNodeOptions[] = [];\\n        for (let i = 0; i < 2; i += 1) {\\n          const nodeKey = `${node.nodeKey}-${i}`;\\n          const treeNode: TreeNodeOptions  = {\\n            nodeKey,\\n            name: nodeKey,\\n            children: [],\\n            hasChildren: true\\n          };\\n          result.push(treeNode);\\n        }\\n        setTimeout(() => {\\n          callback(result);\\n        }, 500);\\n      }\\n      const checkedNodes = () => {\\n        const checks = virTree.value!.getCheckedNodes();\\n        console.log(\'checks\', checks);\\n      }\\n      return {\\n        list,\\n        virTree,\\n        loadData,\\n        checkedNodes\\n      }\\n    }\\n  });\\n<\/script>\\n","highlight":"<pre class=\'hljs\'><code>&lt;<span class=\\"hljs-keyword\\">template</span>&gt;\\n  &lt;<span class=\\"hljs-keyword\\">div</span> class=<span class=\\"hljs-string\\">\\"demo\\"</span>&gt;\\n    &lt;button @click=<span class=\\"hljs-string\\">\\"checkedNodes\\"</span>&gt;获取勾选节点&lt;/button&gt;\\n    &lt;vir-tree <span class=\\"hljs-keyword\\">ref</span>=<span class=\\"hljs-string\\">\\"virTree\\"</span> :source=<span class=\\"hljs-string\\">\\"list\\"</span> show-checkbox :loadData=<span class=\\"hljs-string\\">\\"loadData\\"</span> /&gt;\\n  &lt;/<span class=\\"hljs-keyword\\">div</span>&gt;\\n&lt;/<span class=\\"hljs-keyword\\">template</span>&gt;\\n\\n&lt;script lang=<span class=\\"hljs-string\\">\\"tsx\\"</span>&gt;\\n  <span class=\\"hljs-keyword\\">import</span> {defineComponent, onMounted, <span class=\\"hljs-keyword\\">ref</span>} <span class=\\"hljs-keyword\\">from</span> \'vue\';\\n  <span class=\\"hljs-keyword\\">import</span> { <span class=\\"hljs-type\\">VirTree</span> } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"vue-virtual-tree\\"</span>;\\n  <span class=\\"hljs-keyword\\">import</span> {<span class=\\"hljs-type\\">TreeInstance</span>, <span class=\\"hljs-type\\">TreeNodeOptions</span>} <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"vue-virtual-tree/VirtualTree/types\\"</span>;\\n\\n  function recursion(path = \'<span class=\\"hljs-number\\">0</span>\'): <span class=\\"hljs-type\\">TreeNodeOptions</span>[] {\\n    <span class=\\"hljs-keyword\\">const</span> list = [];\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; <span class=\\"hljs-number\\">2</span>; i += <span class=\\"hljs-number\\">1</span>) {\\n      <span class=\\"hljs-keyword\\">const</span> nodeKey = `${path}-${i}`;\\n      <span class=\\"hljs-keyword\\">const</span> treeNode: <span class=\\"hljs-type\\">TreeNodeOptions</span>  = {\\n        nodeKey,\\n        name: nodeKey,\\n        children: [],\\n        hasChildren: <span class=\\"hljs-literal\\">true</span>\\n      };\\n      list.push(treeNode);\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> list;\\n  }\\n\\n  <span class=\\"hljs-keyword\\">export</span> default defineComponent({\\n    name: \'<span class=\\"hljs-type\\">AsyncDataDemo</span>\',\\n    components: { <span class=\\"hljs-type\\">VirTree</span> },\\n    setup(prop, {emit}) {\\n      <span class=\\"hljs-keyword\\">const</span> list = <span class=\\"hljs-keyword\\">ref</span>&lt;<span class=\\"hljs-type\\">TreeNodeOptions</span>[]&gt;([]);\\n      <span class=\\"hljs-keyword\\">const</span> virTree = <span class=\\"hljs-keyword\\">ref</span>&lt;<span class=\\"hljs-type\\">TreeInstance</span> | null&gt;(null);\\n      onMounted(() =&gt; {\\n        list.value = recursion();\\n      });\\n      <span class=\\"hljs-keyword\\">const</span> loadData = (node: <span class=\\"hljs-type\\">TreeNodeOptions</span>, callback: (children: <span class=\\"hljs-type\\">TreeNodeOptions</span>[]) =&gt; <span class=\\"hljs-type\\">void</span>) =&gt; {\\n        console.log(\'loadData\', node);\\n        <span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-literal\\">result</span>: <span class=\\"hljs-type\\">TreeNodeOptions</span>[] = [];\\n        <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; <span class=\\"hljs-number\\">2</span>; i += <span class=\\"hljs-number\\">1</span>) {\\n          <span class=\\"hljs-keyword\\">const</span> nodeKey = `${node.nodeKey}-${i}`;\\n          <span class=\\"hljs-keyword\\">const</span> treeNode: <span class=\\"hljs-type\\">TreeNodeOptions</span>  = {\\n            nodeKey,\\n            name: nodeKey,\\n            children: [],\\n            hasChildren: <span class=\\"hljs-literal\\">true</span>\\n          };\\n          <span class=\\"hljs-literal\\">result</span>.push(treeNode);\\n        }\\n        setTimeout(() =&gt; {\\n          callback(<span class=\\"hljs-literal\\">result</span>);\\n        }, <span class=\\"hljs-number\\">500</span>);\\n      }\\n      <span class=\\"hljs-keyword\\">const</span> checkedNodes = () =&gt; {\\n        <span class=\\"hljs-keyword\\">const</span> checks = virTree.value!.getCheckedNodes();\\n        console.log(\'checks\', checks);\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> {\\n        list,\\n        virTree,\\n        loadData,\\n        checkedNodes\\n      }\\n    }\\n  });\\n&lt;/script&gt;\\n</code></pre>"},"customNode":{"source":"<template>\\n  <div class=\\"demo\\">\\n    <vir-tree :source=\\"list\\" show-checkbox :render=\\"renderNode\\" />\\n  </div>\\n</template>\\n\\n<script lang=\\"tsx\\">\\n  import {defineComponent, onMounted, ref} from \'vue\';\\n  import { VirTree } from \\"vue-virtual-tree\\";\\n  import {TreeInstance, TreeNodeOptions} from \\"vue-virtual-tree/VirtualTree/types\\";\\n\\n  function recursion(path = \'0\', level = 3): TreeNodeOptions[] {\\n    const list = [];\\n    for (let i = 0; i < 10; i++) {\\n      const nodeKey = `${path}-${i}`;\\n      const treeNode: TreeNodeOptions = {\\n        nodeKey,\\n        name: nodeKey,\\n        children: [],\\n        hasChildren: true\\n      };\\n\\n      if (level > 0) {\\n        treeNode.children = recursion(nodeKey, level - 1);\\n      } else {\\n        treeNode.hasChildren = false;\\n      }\\n\\n      list.push(treeNode);\\n    }\\n    return list;\\n  }\\n\\n  export default defineComponent({\\n    name: \'CustomNodeDemo\',\\n    setup(prop, {emit}) {\\n      const list = ref<TreeNodeOptions[]>([]);\\n      onMounted(() => {\\n        list.value = recursion();\\n      });\\n      const renderNode = (node: TreeNodeOptions) => {\\n        return <div style=\\"padding: 0 4px;\\"><b style=\\"color: #f60;\\">{ node.name }</b></div>\\n      }\\n      return {\\n        list,\\n        renderNode\\n      }\\n    }\\n  });\\n<\/script>\\n","highlight":"<pre class=\'hljs\'><code>&lt;<span class=\\"hljs-keyword\\">template</span>&gt;\\n  &lt;<span class=\\"hljs-keyword\\">div</span> class=<span class=\\"hljs-string\\">\\"demo\\"</span>&gt;\\n    &lt;vir-tree :source=<span class=\\"hljs-string\\">\\"list\\"</span> show-checkbox :render=<span class=\\"hljs-string\\">\\"renderNode\\"</span> /&gt;\\n  &lt;/<span class=\\"hljs-keyword\\">div</span>&gt;\\n&lt;/<span class=\\"hljs-keyword\\">template</span>&gt;\\n\\n&lt;script lang=<span class=\\"hljs-string\\">\\"tsx\\"</span>&gt;\\n  <span class=\\"hljs-keyword\\">import</span> {defineComponent, onMounted, <span class=\\"hljs-keyword\\">ref</span>} <span class=\\"hljs-keyword\\">from</span> \'vue\';\\n  <span class=\\"hljs-keyword\\">import</span> { <span class=\\"hljs-type\\">VirTree</span> } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"vue-virtual-tree\\"</span>;\\n  <span class=\\"hljs-keyword\\">import</span> {<span class=\\"hljs-type\\">TreeInstance</span>, <span class=\\"hljs-type\\">TreeNodeOptions</span>} <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"vue-virtual-tree/VirtualTree/types\\"</span>;\\n\\n  function recursion(path = \'<span class=\\"hljs-number\\">0</span>\', level = <span class=\\"hljs-number\\">3</span>): <span class=\\"hljs-type\\">TreeNodeOptions</span>[] {\\n    <span class=\\"hljs-keyword\\">const</span> list = [];\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; <span class=\\"hljs-number\\">10</span>; i++) {\\n      <span class=\\"hljs-keyword\\">const</span> nodeKey = `${path}-${i}`;\\n      <span class=\\"hljs-keyword\\">const</span> treeNode: <span class=\\"hljs-type\\">TreeNodeOptions</span> = {\\n        nodeKey,\\n        name: nodeKey,\\n        children: [],\\n        hasChildren: <span class=\\"hljs-literal\\">true</span>\\n      };\\n\\n      <span class=\\"hljs-keyword\\">if</span> (level &gt; <span class=\\"hljs-number\\">0</span>) {\\n        treeNode.children = recursion(nodeKey, level - <span class=\\"hljs-number\\">1</span>);\\n      } <span class=\\"hljs-keyword\\">else</span> {\\n        treeNode.hasChildren = <span class=\\"hljs-literal\\">false</span>;\\n      }\\n\\n      list.push(treeNode);\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> list;\\n  }\\n\\n  <span class=\\"hljs-keyword\\">export</span> default defineComponent({\\n    name: \'<span class=\\"hljs-type\\">CustomNodeDemo</span>\',\\n    setup(prop, {emit}) {\\n      <span class=\\"hljs-keyword\\">const</span> list = <span class=\\"hljs-keyword\\">ref</span>&lt;<span class=\\"hljs-type\\">TreeNodeOptions</span>[]&gt;([]);\\n      onMounted(() =&gt; {\\n        list.value = recursion();\\n      });\\n      <span class=\\"hljs-keyword\\">const</span> renderNode = (node: <span class=\\"hljs-type\\">TreeNodeOptions</span>) =&gt; {\\n        <span class=\\"hljs-keyword\\">return</span> &lt;<span class=\\"hljs-keyword\\">div</span> style=<span class=\\"hljs-string\\">\\"padding: 0 4px;\\"</span>&gt;&lt;b style=<span class=\\"hljs-string\\">\\"color: #f60;\\"</span>&gt;{ node.name }&lt;/b&gt;&lt;/<span class=\\"hljs-keyword\\">div</span>&gt;\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> {\\n        list,\\n        renderNode\\n      }\\n    }\\n  });\\n&lt;/script&gt;"},"customIcon":{"source":"<template>\\n  <div class=\\"demo\\">\\n    <vir-tree :source=\\"list\\" show-checkbox :loadData=\\"loadData\\">\\n      <template #icon=\\"loading\\">\\n        <i v-if=\\"loading\\" class=\\"iconfont iconcustom-icon ico-loading\\"></i>\\n        <i v-else class=\\"iconfont iconzhankai\\"></i>\\n      </template>\\n    </vir-tree>\\n  </div>\\n</template>\\n\\n<script lang=\\"tsx\\">\\nimport {defineComponent, onMounted, ref} from \'vue\';\\nimport { VirTree } from \\"vue-virtual-tree\\";\\nimport { TreeNodeOptions } from \\"vue-virtual-tree/VirtualTree/types\\";\\n\\nfunction recursion(path = \'0\'): TreeNodeOptions[] {\\n  const list = [];\\n  for (let i = 0; i < 2; i += 1) {\\n    const nodeKey = `${path}-${i}`;\\n    const treeNode: TreeNodeOptions  = {\\n      nodeKey,\\n      name: nodeKey,\\n      children: [],\\n      hasChildren: true\\n    };\\n    list.push(treeNode);\\n  }\\n  return list;\\n}\\n\\nexport default defineComponent({\\n  name: \'CustomIcon\',\\n  setup(prop, {emit}) {\\n    const list = ref<TreeNodeOptions[]>([]);\\n    onMounted(() => {\\n      list.value = recursion();\\n    });\\n    const loadData = (node: TreeNodeOptions, callback: (children: TreeNodeOptions[]) => void) => {\\n      console.log(\'loadData\', node);\\n      const result: TreeNodeOptions[] = [];\\n      for (let i = 0; i < 2; i += 1) {\\n        const nodeKey = `${node.nodeKey}-${i}`;\\n        const treeNode: TreeNodeOptions  = {\\n          nodeKey,\\n          name: nodeKey,\\n          children: [],\\n          hasChildren: true\\n        };\\n        result.push(treeNode);\\n      }\\n      setTimeout(() => {\\n        callback(result);\\n      }, 500);\\n    }\\n    return {\\n      list,\\n      loadData\\n    }\\n  }\\n});\\n<\/script>\\n","highlight":"<pre class=\'hljs\'><code>&lt;<span class=\\"hljs-keyword\\">template</span>&gt;\\n  &lt;<span class=\\"hljs-keyword\\">div</span> class=<span class=\\"hljs-string\\">\\"demo\\"</span>&gt;\\n    &lt;vir-tree :source=<span class=\\"hljs-string\\">\\"list\\"</span> show-checkbox :loadData=<span class=\\"hljs-string\\">\\"loadData\\"</span>&gt;\\n      &lt;<span class=\\"hljs-keyword\\">template</span> <span class=\\"hljs-comment\\">#icon=\\"loading\\"&gt;</span>\\n        &lt;i v-<span class=\\"hljs-keyword\\">if</span>=<span class=\\"hljs-string\\">\\"loading\\"</span> class=<span class=\\"hljs-string\\">\\"iconfont iconcustom-icon ico-loading\\"</span>&gt;&lt;/i&gt;\\n        &lt;i v-<span class=\\"hljs-keyword\\">else</span> class=<span class=\\"hljs-string\\">\\"iconfont iconzhankai\\"</span>&gt;&lt;/i&gt;\\n      &lt;/<span class=\\"hljs-keyword\\">template</span>&gt;\\n    &lt;/vir-tree&gt;\\n  &lt;/<span class=\\"hljs-keyword\\">div</span>&gt;\\n&lt;/<span class=\\"hljs-keyword\\">template</span>&gt;\\n\\n&lt;script lang=<span class=\\"hljs-string\\">\\"tsx\\"</span>&gt;\\n<span class=\\"hljs-keyword\\">import</span> {defineComponent, onMounted, <span class=\\"hljs-keyword\\">ref</span>} <span class=\\"hljs-keyword\\">from</span> \'vue\';\\n<span class=\\"hljs-keyword\\">import</span> { <span class=\\"hljs-type\\">VirTree</span> } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"vue-virtual-tree\\"</span>;\\n<span class=\\"hljs-keyword\\">import</span> { <span class=\\"hljs-type\\">TreeNodeOptions</span> } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"vue-virtual-tree/VirtualTree/types\\"</span>;\\n\\nfunction recursion(path = \'<span class=\\"hljs-number\\">0</span>\'): <span class=\\"hljs-type\\">TreeNodeOptions</span>[] {\\n  <span class=\\"hljs-keyword\\">const</span> list = [];\\n  <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; <span class=\\"hljs-number\\">2</span>; i += <span class=\\"hljs-number\\">1</span>) {\\n    <span class=\\"hljs-keyword\\">const</span> nodeKey = `${path}-${i}`;\\n    <span class=\\"hljs-keyword\\">const</span> treeNode: <span class=\\"hljs-type\\">TreeNodeOptions</span>  = {\\n      nodeKey,\\n      name: nodeKey,\\n      children: [],\\n      hasChildren: <span class=\\"hljs-literal\\">true</span>\\n    };\\n    list.push(treeNode);\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> list;\\n}\\n\\n<span class=\\"hljs-keyword\\">export</span> default defineComponent({\\n  name: \'<span class=\\"hljs-type\\">CustomIcon</span>\',\\n  setup(prop, {emit}) {\\n    <span class=\\"hljs-keyword\\">const</span> list = <span class=\\"hljs-keyword\\">ref</span>&lt;<span class=\\"hljs-type\\">TreeNodeOptions</span>[]&gt;([]);\\n    onMounted(() =&gt; {\\n      list.value = recursion();\\n    });\\n    <span class=\\"hljs-keyword\\">const</span> loadData = (node: <span class=\\"hljs-type\\">TreeNodeOptions</span>, callback: (children: <span class=\\"hljs-type\\">TreeNodeOptions</span>[]) =&gt; <span class=\\"hljs-type\\">void</span>) =&gt; {\\n      console.log(\'loadData\', node);\\n      <span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-literal\\">result</span>: <span class=\\"hljs-type\\">TreeNodeOptions</span>[] = [];\\n      <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; <span class=\\"hljs-number\\">2</span>; i += <span class=\\"hljs-number\\">1</span>) {\\n        <span class=\\"hljs-keyword\\">const</span> nodeKey = `${node.nodeKey}-${i}`;\\n        <span class=\\"hljs-keyword\\">const</span> treeNode: <span class=\\"hljs-type\\">TreeNodeOptions</span>  = {\\n          nodeKey,\\n          name: nodeKey,\\n          children: [],\\n          hasChildren: <span class=\\"hljs-literal\\">true</span>\\n        };\\n        <span class=\\"hljs-literal\\">result</span>.push(treeNode);\\n      }\\n      setTimeout(() =&gt; {\\n        callback(<span class=\\"hljs-literal\\">result</span>);\\n      }, <span class=\\"hljs-number\\">500</span>);\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> {\\n      list,\\n      loadData\\n    }\\n  }\\n});\\n&lt;/script&gt;\\n</code></pre>"},"searchNode":{"source":"<template>\\n  <div class=\\"demo\\">\\n    <input placeholder=\\"回车搜索\\" @keyup.enter=\\"search\\" />\\n    <section>\\n      <vir-tree show-checkbox :source=\\"list\\" :render=\\"renderNode\\" />\\n    </section>\\n  </div>\\n</template>\\n\\n<script lang=\\"tsx\\">\\n  import {defineComponent, onMounted, ref} from \'vue\';\\n  import { VirTree } from \\"vue-virtual-tree\\";\\n  import { TreeNodeOptions } from \\"vue-virtual-tree/VirtualTree/types\\";\\n  const UNIQUE_WRAPPERS = [\'##==-open_tag-==##\', \'##==-close_tag-==##\'];\\n  let expandKeys: Array<string | number> = [];\\n  function getParentPath (parent: TreeNodeOptions | null): Array<string | number> {\\n    let result = [];\\n    if (parent) {\\n      const base = parent.parentPath || [];\\n      result = base.concat(parent.nodeKey);\\n    }\\n    return result;\\n  }\\n  function recursion(path = \'0\', level = 3, parent: TreeNodeOptions | null = null): TreeNodeOptions[] {\\n    const list = [];\\n    for (let i = 0; i < 10; i++) {\\n      const nodeKey = `${path}-${i}`;\\n      const treeNode: TreeNodeOptions = {\\n        nodeKey,\\n        name: nodeKey,\\n        children: [],\\n        hasChildren: true,\\n        expanded: expandKeys.includes(nodeKey),\\n        parentPath: getParentPath(parent)\\n      };\\n\\n      if (level > 0) {\\n        treeNode.children = recursion(nodeKey, level - 1, treeNode);\\n      } else {\\n        treeNode.hasChildren = false;\\n      }\\n\\n      list.push(treeNode);\\n    }\\n    return list;\\n  }\\n\\n  export default defineComponent({\\n    name: \'SearchNodeDemo\',\\n    setup(prop, {emit}) {\\n      const keywords = ref(\'\');\\n      const list = ref<TreeNodeOptions[]>([]);\\n\\n      onMounted(() => {\\n        list.value = recursion();\\n        // console.log(\'list\', list.value);\\n      });\\n      const formatSearchValue = (value: string) => {\\n        return new RegExp(value.replace(/([.*+?^=!:${}()|[\\\\]\\\\/\\\\\\\\])/g, \'\\\\\\\\$&\'), \'i\');\\n      }\\n      const findMatchedNodes = (keywords: string): TreeNodeOptions[] => {\\n        const result: TreeNodeOptions[] = [];\\n        const recursion = (list: TreeNodeOptions[], parent: TreeNodeOptions | null = null) => {\\n          for (const item of list) {\\n            const matched = formatSearchValue(keywords).test(item.name);\\n            if (matched) {\\n              result.push(item);\\n            }\\n            if (parent) {\\n              parent.expanded = matched;\\n            }\\n            if (item.children?.length) {\\n              recursion(item.children, item);\\n            }\\n          }\\n        }\\n        if (keywords) {\\n          recursion(list.value);\\n        }\\n        return result;\\n      }\\n      const search = (event: KeyboardEvent) => {\\n        keywords.value = (event.target as HTMLInputElement).value;\\n        const matchedNodes = findMatchedNodes(keywords.value);\\n        if (matchedNodes.length) {\\n          // 取出parentPath > 拍扁 > 去重\\n          expandKeys = [...new Set(matchedNodes.map(item => item.parentPath).flat())];\\n          list.value = recursion();\\n        }\\n      }\\n\\n      const transform = (value: string, matchValue: string) => {\\n        if (matchValue) {\\n          const wrapValue = value.replace(formatSearchValue(matchValue), `${UNIQUE_WRAPPERS[0]}$&${UNIQUE_WRAPPERS[1]}`);\\n          return wrapValue\\n            .replace(new RegExp(UNIQUE_WRAPPERS[0], \'g\'), \'<span style=\\"color: #ff2041;\\">\')\\n            .replace(new RegExp(UNIQUE_WRAPPERS[1], \'g\'), \'</span>\');\\n        }\\n        return value;\\n      }\\n      const renderNode = (node: TreeNodeOptions) => {\\n        const content = transform(node.name, keywords.value);\\n        return <div style=\\"padding: 0 4px;\\" innerHTML={ content } />;\\n      }\\n      return {\\n        list,\\n        search,\\n        renderNode\\n      }\\n    }\\n  });\\n<\/script>\\n","highlight":"<pre class=\'hljs\'><code>&lt;<span class=\\"hljs-keyword\\">template</span>&gt;\\n  &lt;<span class=\\"hljs-keyword\\">div</span> class=<span class=\\"hljs-string\\">\\"demo\\"</span>&gt;\\n    &lt;input placeholder=<span class=\\"hljs-string\\">\\"回车搜索\\"</span> @keyup.enter=<span class=\\"hljs-string\\">\\"search\\"</span> /&gt;\\n    &lt;section&gt;\\n      &lt;vir-tree show-checkbox :source=<span class=\\"hljs-string\\">\\"list\\"</span> :render=<span class=\\"hljs-string\\">\\"renderNode\\"</span> /&gt;\\n    &lt;/section&gt;\\n  &lt;/<span class=\\"hljs-keyword\\">div</span>&gt;\\n&lt;/<span class=\\"hljs-keyword\\">template</span>&gt;\\n\\n&lt;script lang=<span class=\\"hljs-string\\">\\"tsx\\"</span>&gt;\\n  <span class=\\"hljs-keyword\\">import</span> {defineComponent, onMounted, <span class=\\"hljs-keyword\\">ref</span>} <span class=\\"hljs-keyword\\">from</span> \'vue\';\\n  <span class=\\"hljs-keyword\\">import</span> { <span class=\\"hljs-type\\">VirTree</span> } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"vue-virtual-tree\\"</span>;\\n  <span class=\\"hljs-keyword\\">import</span> { <span class=\\"hljs-type\\">TreeNodeOptions</span> } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"vue-virtual-tree/VirtualTree/types\\"</span>;\\n  <span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-type\\">UNIQUE_WRAPPERS</span> = [\'<span class=\\"hljs-comment\\">##==-open_tag-==##\', \'##==-close_tag-==##\'];</span>\\n  <span class=\\"hljs-keyword\\">let</span> expandKeys: <span class=\\"hljs-type\\">Array</span>&lt;<span class=\\"hljs-type\\">string</span> | number&gt; = [];\\n  function getParentPath (parent: <span class=\\"hljs-type\\">TreeNodeOptions</span> | null): <span class=\\"hljs-type\\">Array</span>&lt;<span class=\\"hljs-type\\">string</span> | number&gt; {\\n    <span class=\\"hljs-keyword\\">let</span> <span class=\\"hljs-literal\\">result</span> = [];\\n    <span class=\\"hljs-keyword\\">if</span> (parent) {\\n      <span class=\\"hljs-keyword\\">const</span> base = parent.parentPath || [];\\n      <span class=\\"hljs-literal\\">result</span> = base.concat(parent.nodeKey);\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">result</span>;\\n  }\\n  function recursion(path = \'<span class=\\"hljs-number\\">0</span>\', level = <span class=\\"hljs-number\\">3</span>, parent: <span class=\\"hljs-type\\">TreeNodeOptions</span> | null = null): <span class=\\"hljs-type\\">TreeNodeOptions</span>[] {\\n    <span class=\\"hljs-keyword\\">const</span> list = [];\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; <span class=\\"hljs-number\\">10</span>; i++) {\\n      <span class=\\"hljs-keyword\\">const</span> nodeKey = `${path}-${i}`;\\n      <span class=\\"hljs-keyword\\">const</span> treeNode: <span class=\\"hljs-type\\">TreeNodeOptions</span> = {\\n        nodeKey,\\n        name: nodeKey,\\n        children: [],\\n        hasChildren: <span class=\\"hljs-literal\\">true</span>,\\n        expanded: expandKeys.includes(nodeKey),\\n        parentPath: getParentPath(parent)\\n      };\\n\\n      <span class=\\"hljs-keyword\\">if</span> (level &gt; <span class=\\"hljs-number\\">0</span>) {\\n        treeNode.children = recursion(nodeKey, level - <span class=\\"hljs-number\\">1</span>, treeNode);\\n      } <span class=\\"hljs-keyword\\">else</span> {\\n        treeNode.hasChildren = <span class=\\"hljs-literal\\">false</span>;\\n      }\\n\\n      list.push(treeNode);\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> list;\\n  }\\n\\n  <span class=\\"hljs-keyword\\">export</span> default defineComponent({\\n    name: \'<span class=\\"hljs-type\\">SearchNodeDemo</span>\',\\n    setup(prop, {emit}) {\\n      <span class=\\"hljs-keyword\\">const</span> keywords = <span class=\\"hljs-keyword\\">ref</span>(\'\');\\n      <span class=\\"hljs-keyword\\">const</span> list = <span class=\\"hljs-keyword\\">ref</span>&lt;<span class=\\"hljs-type\\">TreeNodeOptions</span>[]&gt;([]);\\n\\n      onMounted(() =&gt; {\\n        list.value = recursion();\\n        // console.log(\'list\', list.value);\\n      });\\n      <span class=\\"hljs-keyword\\">const</span> formatSearchValue = (value: <span class=\\"hljs-type\\">string</span>) =&gt; {\\n        <span class=\\"hljs-keyword\\">return</span> new <span class=\\"hljs-type\\">RegExp</span>(value.replace(/([.*+?^=!:${}()|[\\\\]\\\\/\\\\\\\\])/g, \'\\\\\\\\$&amp;\'), \'i\');\\n      }\\n      <span class=\\"hljs-keyword\\">const</span> findMatchedNodes = (keywords: <span class=\\"hljs-type\\">string</span>): <span class=\\"hljs-type\\">TreeNodeOptions</span>[] =&gt; {\\n        <span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-literal\\">result</span>: <span class=\\"hljs-type\\">TreeNodeOptions</span>[] = [];\\n        <span class=\\"hljs-keyword\\">const</span> recursion = (list: <span class=\\"hljs-type\\">TreeNodeOptions</span>[], parent: <span class=\\"hljs-type\\">TreeNodeOptions</span> | null = null) =&gt; {\\n          <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">const</span> item <span class=\\"hljs-keyword\\">of</span> list) {\\n            <span class=\\"hljs-keyword\\">const</span> matched = formatSearchValue(keywords).test(item.name);\\n            <span class=\\"hljs-keyword\\">if</span> (matched) {\\n              <span class=\\"hljs-literal\\">result</span>.push(item);\\n            }\\n            <span class=\\"hljs-keyword\\">if</span> (parent) {\\n              parent.expanded = matched;\\n            }\\n            <span class=\\"hljs-keyword\\">if</span> (item.children?.length) {\\n              recursion(item.children, item);\\n            }\\n          }\\n        }\\n        <span class=\\"hljs-keyword\\">if</span> (keywords) {\\n          recursion(list.value);\\n        }\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">result</span>;\\n      }\\n      <span class=\\"hljs-keyword\\">const</span> search = (event: <span class=\\"hljs-type\\">KeyboardEvent</span>) =&gt; {\\n        keywords.value = (event.target <span class=\\"hljs-keyword\\">as</span> <span class=\\"hljs-type\\">HTMLInputElement</span>).value;\\n        <span class=\\"hljs-keyword\\">const</span> matchedNodes = findMatchedNodes(keywords.value);\\n        <span class=\\"hljs-keyword\\">if</span> (matchedNodes.length) {\\n          // 取出parentPath &gt; 拍扁 &gt; 去重\\n          expandKeys = [...new <span class=\\"hljs-type\\">Set</span>(matchedNodes.map(item =&gt; item.parentPath).flat())];\\n          list.value = recursion();\\n        }\\n      }\\n\\n      <span class=\\"hljs-keyword\\">const</span> transform = (value: <span class=\\"hljs-type\\">string</span>, matchValue: <span class=\\"hljs-type\\">string</span>) =&gt; {\\n        <span class=\\"hljs-keyword\\">if</span> (matchValue) {\\n          <span class=\\"hljs-keyword\\">const</span> wrapValue = value.replace(formatSearchValue(matchValue), `${<span class=\\"hljs-type\\">UNIQUE_WRAPPERS</span>[<span class=\\"hljs-number\\">0</span>]}$&amp;${<span class=\\"hljs-type\\">UNIQUE_WRAPPERS</span>[<span class=\\"hljs-number\\">1</span>]}`);\\n          <span class=\\"hljs-keyword\\">return</span> wrapValue\\n            .replace(new <span class=\\"hljs-type\\">RegExp</span>(<span class=\\"hljs-type\\">UNIQUE_WRAPPERS</span>[<span class=\\"hljs-number\\">0</span>], \'g\'), \'&lt;span style=<span class=\\"hljs-string\\">\\"color: #ff2041;\\"</span>&gt;\')\\n            .replace(new <span class=\\"hljs-type\\">RegExp</span>(<span class=\\"hljs-type\\">UNIQUE_WRAPPERS</span>[<span class=\\"hljs-number\\">1</span>], \'g\'), \'&lt;/span&gt;\');\\n        }\\n        <span class=\\"hljs-keyword\\">return</span> value;\\n      }\\n      <span class=\\"hljs-keyword\\">const</span> renderNode = (node: <span class=\\"hljs-type\\">TreeNodeOptions</span>) =&gt; {\\n        <span class=\\"hljs-keyword\\">const</span> content = transform(node.name, keywords.value);\\n        <span class=\\"hljs-keyword\\">return</span> &lt;<span class=\\"hljs-keyword\\">div</span> style=<span class=\\"hljs-string\\">\\"padding: 0 4px;\\"</span> innerHTML={ content } /&gt;;\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> {\\n        list,\\n        search,\\n        renderNode\\n      }\\n    }\\n  });\\n&lt;/script&gt;\\n</code></pre>"}}')}});